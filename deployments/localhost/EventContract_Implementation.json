{
  "address": "0x459239D96976440d68fd78e1401983376840d563",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "regDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrivalTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "location",
          "type": "bytes32"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "UserAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onTime",
          "type": "bool"
        }
      ],
      "name": "UserCheckedArrival",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "invitee",
          "type": "address"
        }
      ],
      "name": "UserInvited",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "checkArrivals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_regDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_arrivalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_location",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_invitees",
          "type": "address[]"
        }
      ],
      "name": "createEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encoded",
          "type": "bytes32"
        }
      ],
      "name": "decodeCoordinates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        }
      ],
      "name": "encodeCoordinates",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eventCountByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "regDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "arrivalTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "penalties",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitmentRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCommitment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "location",
          "type": "bytes32"
        },
        {
          "internalType": "enum IEventContract.ValidationMode",
          "name": "validationMode",
          "type": "uint8"
        },
        {
          "internalType": "enum IEventContract.PenaltyMode",
          "name": "penaltyMode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserJoinedEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserLateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invitee",
          "type": "address"
        }
      ],
      "name": "inviteUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_invitees",
          "type": "address[]"
        }
      ],
      "name": "inviteUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "joinedEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mockValidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "mockValidationTrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "validateArrivalMock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58eb475c2a3f87967e0d8c7f4a73f2b4031a3f36e0278f85c6aa4463430939f5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x459239D96976440d68fd78e1401983376840d563",
    "transactionIndex": 0,
    "gasUsed": "2803889",
    "logsBloom": "0x
    "blockHash": "0x9b7e3b5f94f6c42f184d59e77911a62254136dc80f3398bc2b12c6ddf458f6c1",
    "transactionHash": "0x58eb475c2a3f87967e0d8c7f4a73f2b4031a3f36e0278f85c6aa4463430939f5",
    "logs": [],
    "blockNumber": 217427582,
    "cumulativeGasUsed": "2803889",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a17820e5eb21e3893e10ced3d38dffa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"UserAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onTime\",\"type\":\"bool\"}],\"name\":\"UserCheckedArrival\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"invitee\",\"type\":\"address\"}],\"name\":\"UserInvited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"checkArrivals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_location\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_invitees\",\"type\":\"address[]\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encoded\",\"type\":\"bytes32\"}],\"name\":\"decodeCoordinates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"}],\"name\":\"encodeCoordinates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eventCountByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"enum IEventContract.ValidationMode\",\"name\":\"validationMode\",\"type\":\"uint8\"},{\"internalType\":\"enum IEventContract.PenaltyMode\",\"name\":\"penaltyMode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserJoinedEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"inviteUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_invitees\",\"type\":\"address[]\"}],\"name\":\"inviteUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mockValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"mockValidationTrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"validateArrivalMock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventContract.sol\":\"EventContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/EventContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { IEventContract } from \\\"./IEventContract.sol\\\";\\n\\ncontract EventContract is IEventContract, Initializable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    uint256 public eventCount;\\n    IERC20 public token; // based token for penalty\\n    mapping(uint256 => Event) public events;\\n    mapping(address => uint256[]) public joinedEvents;\\n    mapping(address => uint256) public lateCount;\\n    mapping(address => uint256) public eventCountByUser;\\n    mapping(address => uint256) public userClaimableAmount;\\n\\n    mapping(uint256 => mapping(address => bool)) public mockValidation; //event id to user to validation status\\n\\n    //add storage gap\\n    uint256[50] private __gap;\\n\\n    function initialize(address _token) public initializer {\\n        token = IERC20(_token);\\n        __Ownable_init(msg.sender);\\n    }\\n\\n    function createEvent(\\n        string memory _name,\\n        uint256 _regDeadline, //timestamp for registration deadline\\n        uint256 _arrivalTime, //timestamp for event start time\\n        uint256 commitment,\\n        uint256 penalty,\\n        bytes32 _location,\\n        address[] memory _invitees\\n    ) public onlyOwner {\\n        require(penalty < commitment, \\\"Penalty should be less than commitment\\\");\\n        eventCount++;\\n        Event storage newEvent = events[eventCount];\\n        newEvent.eventId = eventCount;\\n        newEvent.name = _name;\\n        newEvent.regDeadline = _regDeadline;\\n        newEvent.arrivalTime = _arrivalTime;\\n        newEvent.isEnded = false;\\n        newEvent.commitmentRequired = commitment;\\n        newEvent.location = _location;\\n        inviteUsers(eventCount, _invitees);\\n\\n        emit EventCreated(eventCount, _name, _regDeadline, _arrivalTime, _location);\\n    }\\n\\n    function inviteUsers(uint256 _eventId, address[] memory _invitees) public onlyOwner {\\n        for (uint256 i; i < _invitees.length; ) {\\n            inviteUser(_eventId, _invitees[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function inviteUser(uint256 _eventId, address _invitee) public onlyOwner {\\n        Event storage myEvent = events[_eventId];\\n        require(myEvent.participantStatus[_invitee] == UserStatus.Invited, \\\"User already invited\\\");\\n        myEvent.participantStatus[_invitee] = UserStatus.Invited;\\n\\n        emit UserInvited(_eventId, _invitee);\\n    }\\n\\n    function acceptInvite(uint256 _eventId) public {\\n        Event storage myEvent = events[_eventId];\\n        require(myEvent.participantStatus[msg.sender] == UserStatus.Invited, \\\"No invitation found\\\");\\n        require(block.timestamp <= myEvent.regDeadline, \\\"Registration deadline passed\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), myEvent.commitmentRequired);\\n        userClaimableAmount[msg.sender] += myEvent.commitmentRequired;\\n        myEvent.participantStatus[msg.sender] = UserStatus.Accepted;\\n        myEvent.participantList.push(msg.sender);\\n        joinedEvents[msg.sender].push(_eventId);\\n        myEvent.totalCommitment += myEvent.commitmentRequired;\\n        eventCountByUser[msg.sender]++;\\n\\n        emit UserAccepted(_eventId, msg.sender);\\n    }\\n\\n    function checkArrivals(uint256 _eventId) public {\\n        Event storage myEvent = events[_eventId];\\n        require(block.timestamp >= myEvent.arrivalTime, \\\"Event has not started\\\");\\n        require(!myEvent.isEnded, \\\"Event already ended\\\");\\n\\n        for (uint256 i; i < myEvent.participantList.length; ) {\\n            bool onTime = validateArrivalMock(_eventId, myEvent.participantList[i]);\\n            if (!onTime) {\\n                lateCount[myEvent.participantList[i]]++;\\n                _handlePenalty(_eventId, myEvent.participantList[i]);\\n                myEvent.penalties += myEvent.penalties;\\n            } else {\\n                myEvent.onTimeParticipants.push(myEvent.participantList[i]);\\n            }\\n            emit UserCheckedArrival(_eventId, myEvent.participantList[i], onTime);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint256 i; i < myEvent.onTimeParticipants.length; ) {\\n            userClaimableAmount[myEvent.onTimeParticipants[i]] += myEvent.penalties / myEvent.onTimeParticipants.length;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        myEvent.isEnded = true;\\n    }\\n\\n    function validateArrival(uint256 _eventId, address _participant) internal view returns (bool) {\\n        // Implement validation logic based on validation mode\\n        return true;\\n    }\\n\\n    function validateArrivalMock(uint256 _eventId, address _participant) public view returns (bool) {\\n        return mockValidation[_eventId][_participant];\\n    }\\n\\n    function mockValidationTrue(uint256 _eventId, address _participant) public {\\n        mockValidation[_eventId][_participant] = true;\\n    }\\n\\n    function _handlePenalty(uint256 _eventId, address _participant) internal {\\n        userClaimableAmount[_participant] -= events[_eventId].penalties;\\n    }\\n\\n    function getUserJoinedEvents(address _user) public view returns (uint256[] memory) {\\n        return joinedEvents[_user];\\n    }\\n\\n    function getUserLateCount(address _user) public view returns (uint256) {\\n        return lateCount[_user];\\n    }\\n\\n    function claim() public {\\n        require(userClaimableAmount[msg.sender] > 0, \\\"No claimable amount\\\");\\n        uint256 amount = userClaimableAmount[msg.sender];\\n        userClaimableAmount[msg.sender] = 0;\\n        token.safeTransfer(msg.sender, amount);\\n        emit Claimed(msg.sender, amount);\\n    }\\n\\n    function decodeCoordinates(bytes32 encoded) public pure returns (int256 latitude, int256 longitude) {\\n        uint128 lat = uint128(uint256(encoded) >> 128);\\n        uint128 lon = uint128(uint256(encoded) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        latitude = int256(int128(lat));\\n        longitude = int256(int128(lon));\\n    }\\n\\n    function encodeCoordinates(int256 latitude, int256 longitude) public pure returns (bytes32) {\\n        int128 lat = int128(latitude);\\n        int128 lon = int128(longitude);\\n\\n        bytes32 encoded;\\n\\n        assembly {\\n            encoded := or(shl(128, lat), and(lon, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        }\\n\\n        return encoded;\\n    }\\n}\\n\",\"keccak256\":\"0x7507c6eed050043ca4b339777b6a965f40c4fe7e9751bd861a710c56ca0e3f9f\",\"license\":\"MIT\"},\"contracts/IEventContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IEventContract {\\n    struct Event {\\n        uint256 eventId;\\n        string name;\\n        uint256 regDeadline;\\n        uint256 arrivalTime;\\n        bool isEnded;\\n        mapping(address => UserStatus) participantStatus;\\n        address[] participantList;\\n        address[] onTimeParticipants;\\n        uint256 penalties;\\n        uint256 commitmentRequired;\\n        uint256 totalCommitment;\\n        bytes32 location;  // Encoded latitude and longitude\\n        ValidationMode validationMode;\\n        PenaltyMode penaltyMode;\\n    }\\n    enum UserStatus {\\n        Invited,\\n        Accepted\\n    }\\n    enum PenaltyMode {\\n        Strict,\\n        Moderate,\\n        Lenient\\n    }\\n    enum ValidationMode {\\n        Chainlink,\\n        Vote,\\n        NFC\\n    }\\n\\n   event EventCreated(\\n    uint256 eventId,\\n    string name,\\n    uint256 regDeadline,\\n    uint256 arrivalTime,\\n    bytes32 location\\n);\\n\\n\\n    event UserInvited(uint256 eventId, address invitee);\\n    event UserAccepted(uint256 eventId, address participant);\\n    event UserCheckedArrival(uint256 eventId, address participant, bool onTime);\\n    event Claimed(address indexed claimer, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9537dd33213a263d8dd9bfebe9f461cf6925606e5551fc52f4096bdf7120a462\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c4d66de81161007c578063c4d66de8146103f4578063cb7fcc6914610410578063d7c3682214610440578063ed66644414610470578063f2fde38b1461048c578063fc0c546a146104a857610158565b80638da5cb5b1461030d5780639eb6abc61461032b578063b01b134e14610347578063b13e704b14610377578063bf8a8d33146103a7578063bf8e9176146103d857610158565b806359b9a2bc1161011557806359b9a2bc146102395780636e73d74714610269578063715018a61461029957806371be2e4a146102a3578063842d7e9b146102c157806385607ce5146102f157610158565b80630b7914301461015d5780630e66a2fb1461019757806320e8db90146101b35780634e401eee146101cf5780634e71d92d146101ff578063568d873e14610209575b600080fd5b61017760048036038101906101729190611e94565b6104c6565b60405161018e9b9a99989796959493929190612053565b60405180910390f35b6101b160048036038101906101ac9190612163565b6105cf565b005b6101cd60048036038101906101c891906123cc565b61074b565b005b6101e960048036038101906101e491906124a6565b610879565b6040516101f691906124d3565b60405180910390f35b610207610891565b005b610223600480360381019061021e9190612524565b610a3a565b6040516102309190612564565b60405180910390f35b610253600480360381019061024e91906124a6565b610a6d565b604051610260919061263d565b60405180910390f35b610283600480360381019061027e9190612163565b610b04565b604051610290919061265f565b60405180910390f35b6102a1610b33565b005b6102ab610b47565b6040516102b891906124d3565b60405180910390f35b6102db60048036038101906102d69190612163565b610b4d565b6040516102e8919061265f565b60405180910390f35b61030b60048036038101906103069190612163565b610bb5565b005b610315610c22565b6040516103229190612689565b60405180910390f35b610345600480360381019061034091906126a4565b610c5a565b005b610361600480360381019061035c91906124a6565b610ca2565b60405161036e91906124d3565b60405180910390f35b610391600480360381019061038c9190612700565b610cba565b60405161039e91906124d3565b60405180910390f35b6103c160048036038101906103bc9190612740565b610ceb565b6040516103cf92919061277c565b60405180910390f35b6103f260048036038101906103ed9190611e94565b610d27565b005b61040e600480360381019061040991906124a6565b6110cd565b005b61042a600480360381019061042591906124a6565b61129d565b60405161043791906124d3565b60405180910390f35b61045a600480360381019061045591906124a6565b6112b5565b60405161046791906124d3565b60405180910390f35b61048a60048036038101906104859190611e94565b6112fe565b005b6104a660048036038101906104a191906124a6565b61172f565b005b6104b06117b5565b6040516104bd9190612804565b60405180910390f35b60026020528060005260406000206000915090508060000154908060010180546104ef9061284e565b80601f016020809104026020016040519081016040528092919081815260200182805461051b9061284e565b80156105685780601f1061053d57610100808354040283529160200191610568565b820191906000526020600020905b81548152906001019060200180831161054b57829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff169080600801549080600901549080600a01549080600b01549080600c0160009054906101000a900460ff169080600c0160019054906101000a900460ff1690508b565b6105d76117db565b60006002600084815260200190815260200160002090506000600181111561060257610601611f94565b5b8160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600181111561066357610662611f94565b5b146106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906128cb565b60405180910390fd5b60008160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600181111561070857610707611f94565b5b02179055507f9c6d622696d829eae44c9559a6e96ae07091e9ca797bc02c35a7770dbcf04580838360405161073e9291906128eb565b60405180910390a1505050565b6107536117db565b838310610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c90612986565b60405180910390fd5b6000808154809291906107a7906129d5565b91905055506000600260008054815260200190815260200160002090506000548160000181905550878160010190816107e09190612bbf565b5086816002018190555085816003018190555060008160040160006101000a81548160ff0219169083151502179055508481600901819055508281600b018190555061082e60005483610c5a565b7fa735cf875db2e21e3e452aa2475f11cb984b727f91a58b660f5d094d2de5d83f60005489898987604051610867959493929190612c91565b60405180910390a15050505050505050565b60046020528060005260406000206000915090505481565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612d37565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109e93382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118629092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a82604051610a2f91906124d3565b60405180910390a250565b600080839050600083905060006fffffffffffffffffffffffffffffffff82168360801b17905080935050505092915050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610af857602002820191906000526020600020905b815481526020019060010190808311610ae4575b50505050509050919050565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610b3b6117db565b610b4560006118e1565b565b60005481565b60006007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60016007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080610c2d6119b8565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b610c626117db565b60005b8151811015610c9d57610c9283838381518110610c8557610c84612d57565b5b60200260200101516105cf565b806001019050610c65565b505050565b60066020528060005260406000206000915090505481565b60036020528160005260406000208181548110610cd657600080fd5b90600052602060002001600091509150505481565b600080600060808460001c901c905060006fffffffffffffffffffffffffffffffff8560001c16905081600f0b935080600f0b92505050915091565b600060026000838152602001908152602001600020905060006001811115610d5257610d51611f94565b5b8160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166001811115610db357610db2611f94565b5b14610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90612dd2565b60405180910390fd5b8060020154421115610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612e3e565b60405180910390fd5b610e8d33308360090154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119e0909392919063ffffffff16565b8060090154600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ee09190612e5e565b9250508190555060018160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836001811115610f4c57610f4b611f94565b5b021790555080600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055806009015481600a0160008282546110349190612e5e565b92505081905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061108b906129d5565b91905055507fd1a924a4ebd10ca10383a2b97efa5d6960c61a6b66e2cb2eedcb5d4a6644453382336040516110c19291906128eb565b60405180910390a15050565b60006110d7611a62565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111255750825b9050600060018367ffffffffffffffff1614801561115a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611168575080155b1561119f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156111ef5760018560000160086101000a81548160ff0219169083151502179055505b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061123933611a8a565b83156112955760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161128c9190612ee1565b60405180910390a15b505050505050565b60056020528060005260406000206000915090505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008381526020019081526020016000209050806003015442101561135c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135390612f48565b60405180910390fd5b8060040160009054906101000a900460ff16156113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a590612fb4565b60405180910390fd5b60005b816006018054905081101561164357600061140c848460060184815481106113dc576113db612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b4d565b905080611516576004600084600601848154811061142d5761142c612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114a3906129d5565b91905055506114f2848460060184815481106114c2576114c1612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a9e565b826008015483600801600082825461150a9190612e5e565b925050819055506115bc565b826007018360060183815481106115305761152f612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f6963b91589f2ffce5fcfa81b46731b12498032cad52ab6191a1f81eedf4fe2f5848460060184815481106115f4576115f3612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161162f93929190612fd4565b60405180910390a1816001019150506113b1565b5060005b816007018054905081101561170d578160070180549050826008015461166d919061303a565b6006600084600701848154811061168757611686612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fb9190612e5e565b92505081905550806001019050611647565b5060018160040160006101000a81548160ff0219169083151502179055505050565b6117376117db565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117a95760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117a09190612689565b60405180910390fd5b6117b2816118e1565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117e3611b0e565b73ffffffffffffffffffffffffffffffffffffffff16611801610c22565b73ffffffffffffffffffffffffffffffffffffffff161461186057611824611b0e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016118579190612689565b60405180910390fd5b565b6118dc838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161189592919061306b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b16565b505050565b60006118eb6119b8565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b611a5c848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611a1593929190613094565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b16565b50505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611a92611bad565b611a9b81611bed565b50565b6002600083815260200190815260200160002060080154600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b0391906130cb565b925050819055505050565b600033905090565b6000611b41828473ffffffffffffffffffffffffffffffffffffffff16611c7390919063ffffffff16565b90506000815114158015611b66575080806020019051810190611b64919061312b565b155b15611ba857826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611b9f9190612689565b60405180910390fd5b505050565b611bb5611c89565b611beb576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611bf5611bad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c675760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611c5e9190612689565b60405180910390fd5b611c70816118e1565b50565b6060611c8183836000611ca9565b905092915050565b6000611c93611a62565b60000160089054906101000a900460ff16905090565b606081471015611cf057306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611ce79190612689565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611d19919061319f565b60006040518083038185875af1925050503d8060008114611d56576040519150601f19603f3d011682016040523d82523d6000602084013e611d5b565b606091505b5091509150611d6b868383611d76565b925050509392505050565b606082611d8b57611d8682611e05565b611dfd565b60008251148015611db3575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611df557836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611dec9190612689565b60405180910390fd5b819050611dfe565b5b9392505050565b600081511115611e185780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611e7181611e5e565b8114611e7c57600080fd5b50565b600081359050611e8e81611e68565b92915050565b600060208284031215611eaa57611ea9611e54565b5b6000611eb884828501611e7f565b91505092915050565b611eca81611e5e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f0a578082015181840152602081019050611eef565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f3282611ed0565b611f3c8185611edb565b9350611f4c818560208601611eec565b611f5581611f16565b840191505092915050565b60008115159050919050565b611f7581611f60565b82525050565b6000819050919050565b611f8e81611f7b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611fd457611fd3611f94565b5b50565b6000819050611fe582611fc3565b919050565b6000611ff582611fd7565b9050919050565b61200581611fea565b82525050565b6003811061201c5761201b611f94565b5b50565b600081905061202d8261200b565b919050565b600061203d8261201f565b9050919050565b61204d81612032565b82525050565b600061016082019050612069600083018e611ec1565b818103602083015261207b818d611f27565b905061208a604083018c611ec1565b612097606083018b611ec1565b6120a4608083018a611f6c565b6120b160a0830189611ec1565b6120be60c0830188611ec1565b6120cb60e0830187611ec1565b6120d9610100830186611f85565b6120e7610120830185611ffc565b6120f5610140830184612044565b9c9b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213082612105565b9050919050565b61214081612125565b811461214b57600080fd5b50565b60008135905061215d81612137565b92915050565b6000806040838503121561217a57612179611e54565b5b600061218885828601611e7f565b92505060206121998582860161214e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121e582611f16565b810181811067ffffffffffffffff82111715612204576122036121ad565b5b80604052505050565b6000612217611e4a565b905061222382826121dc565b919050565b600067ffffffffffffffff821115612243576122426121ad565b5b61224c82611f16565b9050602081019050919050565b82818337600083830152505050565b600061227b61227684612228565b61220d565b905082815260208101848484011115612297576122966121a8565b5b6122a2848285612259565b509392505050565b600082601f8301126122bf576122be6121a3565b5b81356122cf848260208601612268565b91505092915050565b6122e181611f7b565b81146122ec57600080fd5b50565b6000813590506122fe816122d8565b92915050565b600067ffffffffffffffff82111561231f5761231e6121ad565b5b602082029050602081019050919050565b600080fd5b600061234861234384612304565b61220d565b9050808382526020820190506020840283018581111561236b5761236a612330565b5b835b818110156123945780612380888261214e565b84526020840193505060208101905061236d565b5050509392505050565b600082601f8301126123b3576123b26121a3565b5b81356123c3848260208601612335565b91505092915050565b600080600080600080600060e0888a0312156123eb576123ea611e54565b5b600088013567ffffffffffffffff81111561240957612408611e59565b5b6124158a828b016122aa565b97505060206124268a828b01611e7f565b96505060406124378a828b01611e7f565b95505060606124488a828b01611e7f565b94505060806124598a828b01611e7f565b93505060a061246a8a828b016122ef565b92505060c088013567ffffffffffffffff81111561248b5761248a611e59565b5b6124978a828b0161239e565b91505092959891949750929550565b6000602082840312156124bc576124bb611e54565b5b60006124ca8482850161214e565b91505092915050565b60006020820190506124e86000830184611ec1565b92915050565b6000819050919050565b612501816124ee565b811461250c57600080fd5b50565b60008135905061251e816124f8565b92915050565b6000806040838503121561253b5761253a611e54565b5b60006125498582860161250f565b925050602061255a8582860161250f565b9150509250929050565b60006020820190506125796000830184611f85565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125b481611e5e565b82525050565b60006125c683836125ab565b60208301905092915050565b6000602082019050919050565b60006125ea8261257f565b6125f4818561258a565b93506125ff8361259b565b8060005b8381101561263057815161261788826125ba565b9750612622836125d2565b925050600181019050612603565b5085935050505092915050565b6000602082019050818103600083015261265781846125df565b905092915050565b60006020820190506126746000830184611f6c565b92915050565b61268381612125565b82525050565b600060208201905061269e600083018461267a565b92915050565b600080604083850312156126bb576126ba611e54565b5b60006126c985828601611e7f565b925050602083013567ffffffffffffffff8111156126ea576126e9611e59565b5b6126f68582860161239e565b9150509250929050565b6000806040838503121561271757612716611e54565b5b60006127258582860161214e565b925050602061273685828601611e7f565b9150509250929050565b60006020828403121561275657612755611e54565b5b6000612764848285016122ef565b91505092915050565b612776816124ee565b82525050565b6000604082019050612791600083018561276d565b61279e602083018461276d565b9392505050565b6000819050919050565b60006127ca6127c56127c084612105565b6127a5565b612105565b9050919050565b60006127dc826127af565b9050919050565b60006127ee826127d1565b9050919050565b6127fe816127e3565b82525050565b600060208201905061281960008301846127f5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061286657607f821691505b6020821081036128795761287861281f565b5b50919050565b7f5573657220616c726561647920696e7669746564000000000000000000000000600082015250565b60006128b5601483611edb565b91506128c08261287f565b602082019050919050565b600060208201905081810360008301526128e4816128a8565b9050919050565b60006040820190506129006000830185611ec1565b61290d602083018461267a565b9392505050565b7f50656e616c74792073686f756c64206265206c657373207468616e20636f6d6d60008201527f69746d656e740000000000000000000000000000000000000000000000000000602082015250565b6000612970602683611edb565b915061297b82612914565b604082019050919050565b6000602082019050818103600083015261299f81612963565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129e082611e5e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a1257612a116129a6565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a42565b612a898683612a42565b95508019841693508086168417925050509392505050565b6000612abc612ab7612ab284611e5e565b6127a5565b611e5e565b9050919050565b6000819050919050565b612ad683612aa1565b612aea612ae282612ac3565b848454612a4f565b825550505050565b600090565b612aff612af2565b612b0a818484612acd565b505050565b5b81811015612b2e57612b23600082612af7565b600181019050612b10565b5050565b601f821115612b7357612b4481612a1d565b612b4d84612a32565b81016020851015612b5c578190505b612b70612b6885612a32565b830182612b0f565b50505b505050565b600082821c905092915050565b6000612b9660001984600802612b78565b1980831691505092915050565b6000612baf8383612b85565b9150826002028217905092915050565b612bc882611ed0565b67ffffffffffffffff811115612be157612be06121ad565b5b612beb825461284e565b612bf6828285612b32565b600060209050601f831160018114612c295760008415612c17578287015190505b612c218582612ba3565b865550612c89565b601f198416612c3786612a1d565b60005b82811015612c5f57848901518255600182019150602085019450602081019050612c3a565b86831015612c7c5784890151612c78601f891682612b85565b8355505b6001600288020188555050505b505050505050565b600060a082019050612ca66000830188611ec1565b8181036020830152612cb88187611f27565b9050612cc76040830186611ec1565b612cd46060830185611ec1565b612ce16080830184611f85565b9695505050505050565b7f4e6f20636c61696d61626c6520616d6f756e7400000000000000000000000000600082015250565b6000612d21601383611edb565b9150612d2c82612ceb565b602082019050919050565b60006020820190508181036000830152612d5081612d14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20696e7669746174696f6e20666f756e6400000000000000000000000000600082015250565b6000612dbc601383611edb565b9150612dc782612d86565b602082019050919050565b60006020820190508181036000830152612deb81612daf565b9050919050565b7f526567697374726174696f6e20646561646c696e652070617373656400000000600082015250565b6000612e28601c83611edb565b9150612e3382612df2565b602082019050919050565b60006020820190508181036000830152612e5781612e1b565b9050919050565b6000612e6982611e5e565b9150612e7483611e5e565b9250828201905080821115612e8c57612e8b6129a6565b5b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000612ecb612ec6612ec184612e92565b6127a5565b612e9c565b9050919050565b612edb81612eb0565b82525050565b6000602082019050612ef66000830184612ed2565b92915050565b7f4576656e7420686173206e6f7420737461727465640000000000000000000000600082015250565b6000612f32601583611edb565b9150612f3d82612efc565b602082019050919050565b60006020820190508181036000830152612f6181612f25565b9050919050565b7f4576656e7420616c726561647920656e64656400000000000000000000000000600082015250565b6000612f9e601383611edb565b9150612fa982612f68565b602082019050919050565b60006020820190508181036000830152612fcd81612f91565b9050919050565b6000606082019050612fe96000830186611ec1565b612ff6602083018561267a565b6130036040830184611f6c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304582611e5e565b915061305083611e5e565b9250826130605761305f61300b565b5b828204905092915050565b6000604082019050613080600083018561267a565b61308d6020830184611ec1565b9392505050565b60006060820190506130a9600083018661267a565b6130b6602083018561267a565b6130c36040830184611ec1565b949350505050565b60006130d682611e5e565b91506130e183611e5e565b92508282039050818111156130f9576130f86129a6565b5b92915050565b61310881611f60565b811461311357600080fd5b50565b600081519050613125816130ff565b92915050565b60006020828403121561314157613140611e54565b5b600061314f84828501613116565b91505092915050565b600081519050919050565b600081905092915050565b600061317982613158565b6131838185613163565b9350613193818560208601611eec565b80840191505092915050565b60006131ab828461316e565b91508190509291505056fea264697066735822122045d00f064fe5d1a2cd2816e664bd7393a746ef7ad14ce6a267b3cda4af9caf3a64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c4d66de81161007c578063c4d66de8146103f4578063cb7fcc6914610410578063d7c3682214610440578063ed66644414610470578063f2fde38b1461048c578063fc0c546a146104a857610158565b80638da5cb5b1461030d5780639eb6abc61461032b578063b01b134e14610347578063b13e704b14610377578063bf8a8d33146103a7578063bf8e9176146103d857610158565b806359b9a2bc1161011557806359b9a2bc146102395780636e73d74714610269578063715018a61461029957806371be2e4a146102a3578063842d7e9b146102c157806385607ce5146102f157610158565b80630b7914301461015d5780630e66a2fb1461019757806320e8db90146101b35780634e401eee146101cf5780634e71d92d146101ff578063568d873e14610209575b600080fd5b61017760048036038101906101729190611e94565b6104c6565b60405161018e9b9a99989796959493929190612053565b60405180910390f35b6101b160048036038101906101ac9190612163565b6105cf565b005b6101cd60048036038101906101c891906123cc565b61074b565b005b6101e960048036038101906101e491906124a6565b610879565b6040516101f691906124d3565b60405180910390f35b610207610891565b005b610223600480360381019061021e9190612524565b610a3a565b6040516102309190612564565b60405180910390f35b610253600480360381019061024e91906124a6565b610a6d565b604051610260919061263d565b60405180910390f35b610283600480360381019061027e9190612163565b610b04565b604051610290919061265f565b60405180910390f35b6102a1610b33565b005b6102ab610b47565b6040516102b891906124d3565b60405180910390f35b6102db60048036038101906102d69190612163565b610b4d565b6040516102e8919061265f565b60405180910390f35b61030b60048036038101906103069190612163565b610bb5565b005b610315610c22565b6040516103229190612689565b60405180910390f35b610345600480360381019061034091906126a4565b610c5a565b005b610361600480360381019061035c91906124a6565b610ca2565b60405161036e91906124d3565b60405180910390f35b610391600480360381019061038c9190612700565b610cba565b60405161039e91906124d3565b60405180910390f35b6103c160048036038101906103bc9190612740565b610ceb565b6040516103cf92919061277c565b60405180910390f35b6103f260048036038101906103ed9190611e94565b610d27565b005b61040e600480360381019061040991906124a6565b6110cd565b005b61042a600480360381019061042591906124a6565b61129d565b60405161043791906124d3565b60405180910390f35b61045a600480360381019061045591906124a6565b6112b5565b60405161046791906124d3565b60405180910390f35b61048a60048036038101906104859190611e94565b6112fe565b005b6104a660048036038101906104a191906124a6565b61172f565b005b6104b06117b5565b6040516104bd9190612804565b60405180910390f35b60026020528060005260406000206000915090508060000154908060010180546104ef9061284e565b80601f016020809104026020016040519081016040528092919081815260200182805461051b9061284e565b80156105685780601f1061053d57610100808354040283529160200191610568565b820191906000526020600020905b81548152906001019060200180831161054b57829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff169080600801549080600901549080600a01549080600b01549080600c0160009054906101000a900460ff169080600c0160019054906101000a900460ff1690508b565b6105d76117db565b60006002600084815260200190815260200160002090506000600181111561060257610601611f94565b5b8160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600181111561066357610662611f94565b5b146106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906128cb565b60405180910390fd5b60008160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600181111561070857610707611f94565b5b02179055507f9c6d622696d829eae44c9559a6e96ae07091e9ca797bc02c35a7770dbcf04580838360405161073e9291906128eb565b60405180910390a1505050565b6107536117db565b838310610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c90612986565b60405180910390fd5b6000808154809291906107a7906129d5565b91905055506000600260008054815260200190815260200160002090506000548160000181905550878160010190816107e09190612bbf565b5086816002018190555085816003018190555060008160040160006101000a81548160ff0219169083151502179055508481600901819055508281600b018190555061082e60005483610c5a565b7fa735cf875db2e21e3e452aa2475f11cb984b727f91a58b660f5d094d2de5d83f60005489898987604051610867959493929190612c91565b60405180910390a15050505050505050565b60046020528060005260406000206000915090505481565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612d37565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109e93382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118629092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a82604051610a2f91906124d3565b60405180910390a250565b600080839050600083905060006fffffffffffffffffffffffffffffffff82168360801b17905080935050505092915050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610af857602002820191906000526020600020905b815481526020019060010190808311610ae4575b50505050509050919050565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610b3b6117db565b610b4560006118e1565b565b60005481565b60006007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60016007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080610c2d6119b8565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b610c626117db565b60005b8151811015610c9d57610c9283838381518110610c8557610c84612d57565b5b60200260200101516105cf565b806001019050610c65565b505050565b60066020528060005260406000206000915090505481565b60036020528160005260406000208181548110610cd657600080fd5b90600052602060002001600091509150505481565b600080600060808460001c901c905060006fffffffffffffffffffffffffffffffff8560001c16905081600f0b935080600f0b92505050915091565b600060026000838152602001908152602001600020905060006001811115610d5257610d51611f94565b5b8160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166001811115610db357610db2611f94565b5b14610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90612dd2565b60405180910390fd5b8060020154421115610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612e3e565b60405180910390fd5b610e8d33308360090154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119e0909392919063ffffffff16565b8060090154600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ee09190612e5e565b9250508190555060018160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836001811115610f4c57610f4b611f94565b5b021790555080600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055806009015481600a0160008282546110349190612e5e565b92505081905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061108b906129d5565b91905055507fd1a924a4ebd10ca10383a2b97efa5d6960c61a6b66e2cb2eedcb5d4a6644453382336040516110c19291906128eb565b60405180910390a15050565b60006110d7611a62565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111255750825b9050600060018367ffffffffffffffff1614801561115a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611168575080155b1561119f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156111ef5760018560000160086101000a81548160ff0219169083151502179055505b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061123933611a8a565b83156112955760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161128c9190612ee1565b60405180910390a15b505050505050565b60056020528060005260406000206000915090505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008381526020019081526020016000209050806003015442101561135c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135390612f48565b60405180910390fd5b8060040160009054906101000a900460ff16156113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a590612fb4565b60405180910390fd5b60005b816006018054905081101561164357600061140c848460060184815481106113dc576113db612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b4d565b905080611516576004600084600601848154811061142d5761142c612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114a3906129d5565b91905055506114f2848460060184815481106114c2576114c1612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a9e565b826008015483600801600082825461150a9190612e5e565b925050819055506115bc565b826007018360060183815481106115305761152f612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f6963b91589f2ffce5fcfa81b46731b12498032cad52ab6191a1f81eedf4fe2f5848460060184815481106115f4576115f3612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161162f93929190612fd4565b60405180910390a1816001019150506113b1565b5060005b816007018054905081101561170d578160070180549050826008015461166d919061303a565b6006600084600701848154811061168757611686612d57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fb9190612e5e565b92505081905550806001019050611647565b5060018160040160006101000a81548160ff0219169083151502179055505050565b6117376117db565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117a95760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117a09190612689565b60405180910390fd5b6117b2816118e1565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117e3611b0e565b73ffffffffffffffffffffffffffffffffffffffff16611801610c22565b73ffffffffffffffffffffffffffffffffffffffff161461186057611824611b0e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016118579190612689565b60405180910390fd5b565b6118dc838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161189592919061306b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b16565b505050565b60006118eb6119b8565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b611a5c848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611a1593929190613094565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b16565b50505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611a92611bad565b611a9b81611bed565b50565b6002600083815260200190815260200160002060080154600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b0391906130cb565b925050819055505050565b600033905090565b6000611b41828473ffffffffffffffffffffffffffffffffffffffff16611c7390919063ffffffff16565b90506000815114158015611b66575080806020019051810190611b64919061312b565b155b15611ba857826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611b9f9190612689565b60405180910390fd5b505050565b611bb5611c89565b611beb576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611bf5611bad565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c675760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611c5e9190612689565b60405180910390fd5b611c70816118e1565b50565b6060611c8183836000611ca9565b905092915050565b6000611c93611a62565b60000160089054906101000a900460ff16905090565b606081471015611cf057306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611ce79190612689565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611d19919061319f565b60006040518083038185875af1925050503d8060008114611d56576040519150601f19603f3d011682016040523d82523d6000602084013e611d5b565b606091505b5091509150611d6b868383611d76565b925050509392505050565b606082611d8b57611d8682611e05565b611dfd565b60008251148015611db3575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611df557836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611dec9190612689565b60405180910390fd5b819050611dfe565b5b9392505050565b600081511115611e185780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611e7181611e5e565b8114611e7c57600080fd5b50565b600081359050611e8e81611e68565b92915050565b600060208284031215611eaa57611ea9611e54565b5b6000611eb884828501611e7f565b91505092915050565b611eca81611e5e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f0a578082015181840152602081019050611eef565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f3282611ed0565b611f3c8185611edb565b9350611f4c818560208601611eec565b611f5581611f16565b840191505092915050565b60008115159050919050565b611f7581611f60565b82525050565b6000819050919050565b611f8e81611f7b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611fd457611fd3611f94565b5b50565b6000819050611fe582611fc3565b919050565b6000611ff582611fd7565b9050919050565b61200581611fea565b82525050565b6003811061201c5761201b611f94565b5b50565b600081905061202d8261200b565b919050565b600061203d8261201f565b9050919050565b61204d81612032565b82525050565b600061016082019050612069600083018e611ec1565b818103602083015261207b818d611f27565b905061208a604083018c611ec1565b612097606083018b611ec1565b6120a4608083018a611f6c565b6120b160a0830189611ec1565b6120be60c0830188611ec1565b6120cb60e0830187611ec1565b6120d9610100830186611f85565b6120e7610120830185611ffc565b6120f5610140830184612044565b9c9b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213082612105565b9050919050565b61214081612125565b811461214b57600080fd5b50565b60008135905061215d81612137565b92915050565b6000806040838503121561217a57612179611e54565b5b600061218885828601611e7f565b92505060206121998582860161214e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121e582611f16565b810181811067ffffffffffffffff82111715612204576122036121ad565b5b80604052505050565b6000612217611e4a565b905061222382826121dc565b919050565b600067ffffffffffffffff821115612243576122426121ad565b5b61224c82611f16565b9050602081019050919050565b82818337600083830152505050565b600061227b61227684612228565b61220d565b905082815260208101848484011115612297576122966121a8565b5b6122a2848285612259565b509392505050565b600082601f8301126122bf576122be6121a3565b5b81356122cf848260208601612268565b91505092915050565b6122e181611f7b565b81146122ec57600080fd5b50565b6000813590506122fe816122d8565b92915050565b600067ffffffffffffffff82111561231f5761231e6121ad565b5b602082029050602081019050919050565b600080fd5b600061234861234384612304565b61220d565b9050808382526020820190506020840283018581111561236b5761236a612330565b5b835b818110156123945780612380888261214e565b84526020840193505060208101905061236d565b5050509392505050565b600082601f8301126123b3576123b26121a3565b5b81356123c3848260208601612335565b91505092915050565b600080600080600080600060e0888a0312156123eb576123ea611e54565b5b600088013567ffffffffffffffff81111561240957612408611e59565b5b6124158a828b016122aa565b97505060206124268a828b01611e7f565b96505060406124378a828b01611e7f565b95505060606124488a828b01611e7f565b94505060806124598a828b01611e7f565b93505060a061246a8a828b016122ef565b92505060c088013567ffffffffffffffff81111561248b5761248a611e59565b5b6124978a828b0161239e565b91505092959891949750929550565b6000602082840312156124bc576124bb611e54565b5b60006124ca8482850161214e565b91505092915050565b60006020820190506124e86000830184611ec1565b92915050565b6000819050919050565b612501816124ee565b811461250c57600080fd5b50565b60008135905061251e816124f8565b92915050565b6000806040838503121561253b5761253a611e54565b5b60006125498582860161250f565b925050602061255a8582860161250f565b9150509250929050565b60006020820190506125796000830184611f85565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125b481611e5e565b82525050565b60006125c683836125ab565b60208301905092915050565b6000602082019050919050565b60006125ea8261257f565b6125f4818561258a565b93506125ff8361259b565b8060005b8381101561263057815161261788826125ba565b9750612622836125d2565b925050600181019050612603565b5085935050505092915050565b6000602082019050818103600083015261265781846125df565b905092915050565b60006020820190506126746000830184611f6c565b92915050565b61268381612125565b82525050565b600060208201905061269e600083018461267a565b92915050565b600080604083850312156126bb576126ba611e54565b5b60006126c985828601611e7f565b925050602083013567ffffffffffffffff8111156126ea576126e9611e59565b5b6126f68582860161239e565b9150509250929050565b6000806040838503121561271757612716611e54565b5b60006127258582860161214e565b925050602061273685828601611e7f565b9150509250929050565b60006020828403121561275657612755611e54565b5b6000612764848285016122ef565b91505092915050565b612776816124ee565b82525050565b6000604082019050612791600083018561276d565b61279e602083018461276d565b9392505050565b6000819050919050565b60006127ca6127c56127c084612105565b6127a5565b612105565b9050919050565b60006127dc826127af565b9050919050565b60006127ee826127d1565b9050919050565b6127fe816127e3565b82525050565b600060208201905061281960008301846127f5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061286657607f821691505b6020821081036128795761287861281f565b5b50919050565b7f5573657220616c726561647920696e7669746564000000000000000000000000600082015250565b60006128b5601483611edb565b91506128c08261287f565b602082019050919050565b600060208201905081810360008301526128e4816128a8565b9050919050565b60006040820190506129006000830185611ec1565b61290d602083018461267a565b9392505050565b7f50656e616c74792073686f756c64206265206c657373207468616e20636f6d6d60008201527f69746d656e740000000000000000000000000000000000000000000000000000602082015250565b6000612970602683611edb565b915061297b82612914565b604082019050919050565b6000602082019050818103600083015261299f81612963565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129e082611e5e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a1257612a116129a6565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a42565b612a898683612a42565b95508019841693508086168417925050509392505050565b6000612abc612ab7612ab284611e5e565b6127a5565b611e5e565b9050919050565b6000819050919050565b612ad683612aa1565b612aea612ae282612ac3565b848454612a4f565b825550505050565b600090565b612aff612af2565b612b0a818484612acd565b505050565b5b81811015612b2e57612b23600082612af7565b600181019050612b10565b5050565b601f821115612b7357612b4481612a1d565b612b4d84612a32565b81016020851015612b5c578190505b612b70612b6885612a32565b830182612b0f565b50505b505050565b600082821c905092915050565b6000612b9660001984600802612b78565b1980831691505092915050565b6000612baf8383612b85565b9150826002028217905092915050565b612bc882611ed0565b67ffffffffffffffff811115612be157612be06121ad565b5b612beb825461284e565b612bf6828285612b32565b600060209050601f831160018114612c295760008415612c17578287015190505b612c218582612ba3565b865550612c89565b601f198416612c3786612a1d565b60005b82811015612c5f57848901518255600182019150602085019450602081019050612c3a565b86831015612c7c5784890151612c78601f891682612b85565b8355505b6001600288020188555050505b505050505050565b600060a082019050612ca66000830188611ec1565b8181036020830152612cb88187611f27565b9050612cc76040830186611ec1565b612cd46060830185611ec1565b612ce16080830184611f85565b9695505050505050565b7f4e6f20636c61696d61626c6520616d6f756e7400000000000000000000000000600082015250565b6000612d21601383611edb565b9150612d2c82612ceb565b602082019050919050565b60006020820190508181036000830152612d5081612d14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20696e7669746174696f6e20666f756e6400000000000000000000000000600082015250565b6000612dbc601383611edb565b9150612dc782612d86565b602082019050919050565b60006020820190508181036000830152612deb81612daf565b9050919050565b7f526567697374726174696f6e20646561646c696e652070617373656400000000600082015250565b6000612e28601c83611edb565b9150612e3382612df2565b602082019050919050565b60006020820190508181036000830152612e5781612e1b565b9050919050565b6000612e6982611e5e565b9150612e7483611e5e565b9250828201905080821115612e8c57612e8b6129a6565b5b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000612ecb612ec6612ec184612e92565b6127a5565b612e9c565b9050919050565b612edb81612eb0565b82525050565b6000602082019050612ef66000830184612ed2565b92915050565b7f4576656e7420686173206e6f7420737461727465640000000000000000000000600082015250565b6000612f32601583611edb565b9150612f3d82612efc565b602082019050919050565b60006020820190508181036000830152612f6181612f25565b9050919050565b7f4576656e7420616c726561647920656e64656400000000000000000000000000600082015250565b6000612f9e601383611edb565b9150612fa982612f68565b602082019050919050565b60006020820190508181036000830152612fcd81612f91565b9050919050565b6000606082019050612fe96000830186611ec1565b612ff6602083018561267a565b6130036040830184611f6c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304582611e5e565b915061305083611e5e565b9250826130605761305f61300b565b5b828204905092915050565b6000604082019050613080600083018561267a565b61308d6020830184611ec1565b9392505050565b60006060820190506130a9600083018661267a565b6130b6602083018561267a565b6130c36040830184611ec1565b949350505050565b60006130d682611e5e565b91506130e183611e5e565b92508282039050818111156130f9576130f86129a6565b5b92915050565b61310881611f60565b811461311357600080fd5b50565b600081519050613125816130ff565b92915050565b60006020828403121561314157613140611e54565b5b600061314f84828501613116565b91505092915050565b600081519050919050565b600081905092915050565b600061317982613158565b6131838185613163565b9350613193818560208601611eec565b80840191505092915050565b60006131ab828461316e565b91508190509291505056fea264697066735822122045d00f064fe5d1a2cd2816e664bd7393a746ef7ad14ce6a267b3cda4af9caf3a64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4397,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "eventCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4400,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3587"
      },
      {
        "astId": 4405,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "events",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Event)5104_storage)"
      },
      {
        "astId": 4410,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "joinedEvents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4414,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "lateCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4418,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "eventCountByUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4422,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "userClaimableAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4428,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "mockValidation",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4432,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3587": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(PenaltyMode)5111": {
        "encoding": "inplace",
        "label": "enum IEventContract.PenaltyMode",
        "numberOfBytes": "1"
      },
      "t_enum(UserStatus)5107": {
        "encoding": "inplace",
        "label": "enum IEventContract.UserStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ValidationMode)5115": {
        "encoding": "inplace",
        "label": "enum IEventContract.ValidationMode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(UserStatus)5107)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IEventContract.UserStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(UserStatus)5107"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Event)5104_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEventContract.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)5104_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Event)5104_storage": {
        "encoding": "inplace",
        "label": "struct IEventContract.Event",
        "members": [
          {
            "astId": 5070,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "eventId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5072,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5074,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "regDeadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5076,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "arrivalTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5078,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "isEnded",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5083,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "participantStatus",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_enum(UserStatus)5107)"
          },
          {
            "astId": 5086,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "participantList",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5089,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "onTimeParticipants",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5091,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "penalties",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5093,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "commitmentRequired",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5095,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "totalCommitment",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 5097,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "location",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes32"
          },
          {
            "astId": 5100,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "validationMode",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(ValidationMode)5115"
          },
          {
            "astId": 5103,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "penaltyMode",
            "offset": 1,
            "slot": "12",
            "type": "t_enum(PenaltyMode)5111"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}