{
  "address": "0x138822A4cca0D65B424a7AE6e11DB42aC3B1584d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "regDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrivalTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "location",
          "type": "bytes32"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "UserAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onTime",
          "type": "bool"
        }
      ],
      "name": "UserCheckedArrival",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "invitee",
          "type": "address"
        }
      ],
      "name": "UserInvited",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "checkArrivals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_regDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_arrivalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_location",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_invitees",
          "type": "address[]"
        }
      ],
      "name": "createEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encoded",
          "type": "bytes32"
        }
      ],
      "name": "decodeCoordinates",
      "outputs": [
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        }
      ],
      "name": "encodeCoordinates",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eventCountByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "regDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "arrivalTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "penalties",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitmentRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCommitment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "location",
          "type": "bytes32"
        },
        {
          "internalType": "enum IEventContract.ValidationMode",
          "name": "validationMode",
          "type": "uint8"
        },
        {
          "internalType": "enum IEventContract.PenaltyMode",
          "name": "penaltyMode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getInvitedEvents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "regDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arrivalTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnded",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "participantList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "onTimeParticipants",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "penalties",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitmentRequired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCommitment",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "location",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IEventContract.EventView[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPendingEvents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "regDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arrivalTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnded",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "participantList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "onTimeParticipants",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "penalties",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitmentRequired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCommitment",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "location",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IEventContract.EventView[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isEnded",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAccepted",
          "type": "bool"
        }
      ],
      "name": "getUserEvents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "regDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arrivalTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEnded",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "participantList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "onTimeParticipants",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "penalties",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitmentRequired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCommitment",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "location",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IEventContract.EventView[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserJoinedEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserLateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_invitee",
          "type": "address"
        }
      ],
      "name": "inviteUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_invitees",
          "type": "address[]"
        }
      ],
      "name": "inviteUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invitedEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "joinedEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mockValidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "mockValidationTrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "validateArrivalMock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x108c9a7dcdb47a06a6612b8e807c86040c2afd74181ad16bb43d468807a04da6",
  "receipt": {
    "to": null,
    "from": "0xadd81d4F68AB0420EdA840cFbc07Ff2d6fd708F1",
    "contractAddress": "0x138822A4cca0D65B424a7AE6e11DB42aC3B1584d",
    "transactionIndex": 0,
    "gasUsed": "2500715",
    "logsBloom": "0x
    "blockHash": "0x0b3bf407ffd893ca048ec834b1bb5bd5f59f96f7a3d63a29c3fb2ff0902004de",
    "transactionHash": "0x108c9a7dcdb47a06a6612b8e807c86040c2afd74181ad16bb43d468807a04da6",
    "logs": [],
    "blockNumber": 4428043,
    "cumulativeGasUsed": "2500715",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "71a316711c4a7323f4196590e26bc797",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"UserAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onTime\",\"type\":\"bool\"}],\"name\":\"UserCheckedArrival\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"invitee\",\"type\":\"address\"}],\"name\":\"UserInvited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"checkArrivals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_location\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_invitees\",\"type\":\"address[]\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encoded\",\"type\":\"bytes32\"}],\"name\":\"decodeCoordinates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"}],\"name\":\"encodeCoordinates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eventCountByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"},{\"internalType\":\"enum IEventContract.ValidationMode\",\"name\":\"validationMode\",\"type\":\"uint8\"},{\"internalType\":\"enum IEventContract.PenaltyMode\",\"name\":\"penaltyMode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInvitedEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"participantList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"onTimeParticipants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"}],\"internalType\":\"struct IEventContract.EventView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"participantList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"onTimeParticipants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"}],\"internalType\":\"struct IEventContract.EventView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"}],\"name\":\"getUserEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"regDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"participantList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"onTimeParticipants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"location\",\"type\":\"bytes32\"}],\"internalType\":\"struct IEventContract.EventView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserJoinedEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"inviteUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_invitees\",\"type\":\"address[]\"}],\"name\":\"inviteUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invitedEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mockValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"mockValidationTrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"validateArrivalMock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventContract.sol\":\"EventContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/EventContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { IEventContract } from \\\"./IEventContract.sol\\\";\\n\\ncontract EventContract is IEventContract, Initializable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    uint256 public eventCount;\\n    IERC20 public token; // based token for penalty\\n    mapping(uint256 => Event) public events;\\n    mapping(address => uint256[]) public joinedEvents;\\n    mapping(address => uint256) public lateCount;\\n    mapping(address => uint256) public eventCountByUser;\\n    mapping(address => uint256) public userClaimableAmount;\\n\\n    mapping(uint256 => mapping(address => bool)) public mockValidation; //event id to user to validation status\\n\\n    //add storage gap\\n    uint256[50] private __gap;\\n\\n    mapping(address => uint256[]) public invitedEvents;\\n    uint256[] public activeEvents;\\n\\n    function initialize(address _token) public initializer {\\n        token = IERC20(_token);\\n        __Ownable_init(msg.sender);\\n    }\\n\\n    function createEvent(\\n        string memory _name,\\n        uint256 _regDeadline, //timestamp for registration deadline\\n        uint256 _arrivalTime, //timestamp for event start time\\n        uint256 commitment,\\n        uint256 penalty,\\n        bytes32 _location,\\n        address[] memory _invitees\\n    ) public onlyOwner {\\n        require(penalty < commitment, \\\"Penalty should be less than commitment\\\");\\n        eventCount++;\\n        Event storage newEvent = events[eventCount];\\n        newEvent.eventId = eventCount;\\n        newEvent.name = _name;\\n        newEvent.regDeadline = _regDeadline;\\n        newEvent.arrivalTime = _arrivalTime;\\n        newEvent.isEnded = false;\\n        newEvent.commitmentRequired = commitment;\\n        newEvent.location = _location;\\n        activeEvents.push(eventCount);\\n        // _acceptInvite(newEvent.eventId);\\n        inviteUsers(eventCount, _invitees);\\n\\n        emit EventCreated(eventCount, _name, _regDeadline, _arrivalTime, _location);\\n    }\\n\\n    function inviteUsers(uint256 _eventId, address[] memory _invitees) public onlyOwner {\\n        for (uint256 i; i < _invitees.length; ) {\\n            inviteUser(_eventId, _invitees[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function inviteUser(uint256 _eventId, address _invitee) public onlyOwner {\\n        Event storage myEvent = events[_eventId];\\n        require(myEvent.participantStatus[_invitee] == UserStatus.Invited, \\\"User already invited\\\");\\n        myEvent.participantStatus[_invitee] = UserStatus.Invited;\\n        invitedEvents[_invitee].push(_eventId);\\n        emit UserInvited(_eventId, _invitee);\\n    }\\n\\n    function acceptInvite(uint256 _eventId) public {\\n        Event storage myEvent = events[_eventId];\\n        require(myEvent.participantStatus[msg.sender] == UserStatus.Invited, \\\"No invitation found\\\");\\n        require(block.timestamp <= myEvent.regDeadline, \\\"Registration deadline passed\\\");\\n\\n        _acceptInvite(_eventId);\\n\\n        emit UserAccepted(_eventId, msg.sender);\\n    }\\n\\n    function _acceptInvite(uint256 _eventId) internal {\\n        Event storage myEvent = events[_eventId];\\n        token.safeTransferFrom(msg.sender, address(this), myEvent.commitmentRequired);\\n        userClaimableAmount[msg.sender] += myEvent.commitmentRequired;\\n        myEvent.participantStatus[msg.sender] = UserStatus.Accepted;\\n        myEvent.participantList.push(msg.sender);\\n        joinedEvents[msg.sender].push(_eventId);\\n        myEvent.totalCommitment += myEvent.commitmentRequired;\\n        eventCountByUser[msg.sender]++;\\n    }\\n\\n    function checkArrivals(uint256 _eventId) public {\\n        Event storage myEvent = events[_eventId];\\n        require(block.timestamp >= myEvent.arrivalTime, \\\"Event has not started\\\");\\n        require(!myEvent.isEnded, \\\"Event already ended\\\");\\n\\n        for (uint256 i; i < myEvent.participantList.length; ) {\\n            bool onTime = validateArrivalMock(_eventId, myEvent.participantList[i]);\\n            if (!onTime) {\\n                lateCount[myEvent.participantList[i]]++;\\n                _handlePenalty(_eventId, myEvent.participantList[i]);\\n                myEvent.penalties += myEvent.penalties;\\n            } else {\\n                myEvent.onTimeParticipants.push(myEvent.participantList[i]);\\n            }\\n            emit UserCheckedArrival(_eventId, myEvent.participantList[i], onTime);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint256 i; i < myEvent.onTimeParticipants.length; ) {\\n            userClaimableAmount[myEvent.onTimeParticipants[i]] += myEvent.penalties / myEvent.onTimeParticipants.length;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        myEvent.isEnded = true;\\n        _deleteEvent(_eventId);\\n    }\\n\\n    function validateArrival(uint256 _eventId, address _participant) internal view returns (bool) {\\n        // Implement validation logic based on validation mode\\n        return true;\\n    }\\n\\n    function validateArrivalMock(uint256 _eventId, address _participant) public view returns (bool) {\\n        return mockValidation[_eventId][_participant];\\n    }\\n\\n    function mockValidationTrue(uint256 _eventId, address _participant) public {\\n        mockValidation[_eventId][_participant] = true;\\n    }\\n\\n    function _handlePenalty(uint256 _eventId, address _participant) internal {\\n        userClaimableAmount[_participant] -= events[_eventId].penalties;\\n    }\\n\\n    function getUserJoinedEvents(address _user) public view returns (uint256[] memory) {\\n        return joinedEvents[_user];\\n    }\\n\\n    function getUserLateCount(address _user) public view returns (uint256) {\\n        return lateCount[_user];\\n    }\\n\\n    function claim() public {\\n        require(userClaimableAmount[msg.sender] > 0, \\\"No claimable amount\\\");\\n        uint256 amount = userClaimableAmount[msg.sender];\\n        userClaimableAmount[msg.sender] = 0;\\n        token.safeTransfer(msg.sender, amount);\\n        emit Claimed(msg.sender, amount);\\n    }\\n\\n    function decodeCoordinates(bytes32 encoded) public pure returns (int256 latitude, int256 longitude) {\\n        uint128 lat = uint128(uint256(encoded) >> 128);\\n        uint128 lon = uint128(uint256(encoded) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        latitude = int256(int128(lat));\\n        longitude = int256(int128(lon));\\n    }\\n\\n    function encodeCoordinates(int256 latitude, int256 longitude) public pure returns (bytes32) {\\n        int128 lat = int128(latitude);\\n        int128 lon = int128(longitude);\\n\\n        bytes32 encoded;\\n\\n        assembly {\\n            encoded := or(shl(128, lat), and(lon, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        }\\n\\n        return encoded;\\n    }\\n\\n    //function to delete a speicific event in activeEvents array, make a new array with all active events\\n    function _deleteEvent(uint256 _eventId) internal {\\n        uint256[] memory newActiveEvents = new uint256[](activeEvents.length - 1);\\n        uint256 j;\\n        for (uint256 i; i < activeEvents.length; ) {\\n            if (activeEvents[i] != _eventId) {\\n                newActiveEvents[j] = activeEvents[i];\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        activeEvents = newActiveEvents;\\n    }\\n\\n    function getInvitedEvents(address _user) public view returns (EventView[] memory) {\\n        uint256[] memory eventIds = invitedEvents[_user];\\n        uint256 length = eventIds.length;\\n\\n        EventView[] memory eventsView = new EventView[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            Event storage eventDetails = events[eventIds[i]];\\n            eventsView[i] = EventView({\\n                eventId: eventDetails.eventId,\\n                name: eventDetails.name,\\n                regDeadline: eventDetails.regDeadline,\\n                arrivalTime: eventDetails.arrivalTime,\\n                isEnded: eventDetails.isEnded,\\n                participantList: eventDetails.participantList,\\n                onTimeParticipants: eventDetails.onTimeParticipants,\\n                penalties: eventDetails.penalties,\\n                commitmentRequired: eventDetails.commitmentRequired,\\n                totalCommitment: eventDetails.totalCommitment,\\n                location: eventDetails.location\\n            });\\n        }\\n\\n        return eventsView;\\n    }\\n\\n    function getPendingEvents(address _user) public view returns (EventView[] memory) {\\n        uint256[] memory eventIds = invitedEvents[_user];\\n        uint256 length = eventIds.length;\\n\\n        EventView[] memory eventsView = new EventView[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            Event storage eventDetails = events[eventIds[i]];\\n            if (eventDetails.participantStatus[_user] == UserStatus.Invited) {\\n                eventsView[i] = EventView({\\n                    eventId: eventDetails.eventId,\\n                    name: eventDetails.name,\\n                    regDeadline: eventDetails.regDeadline,\\n                    arrivalTime: eventDetails.arrivalTime,\\n                    isEnded: eventDetails.isEnded,\\n                    participantList: eventDetails.participantList,\\n                    onTimeParticipants: eventDetails.onTimeParticipants,\\n                    penalties: eventDetails.penalties,\\n                    commitmentRequired: eventDetails.commitmentRequired,\\n                    totalCommitment: eventDetails.totalCommitment,\\n                    location: eventDetails.location\\n                });\\n            }\\n        }\\n\\n        return eventsView;\\n    }\\n\\n    function getUserEvents(address _user, bool isEnded, bool isAccepted) public view returns (EventView[] memory) {\\n        uint256[] memory eventIds = joinedEvents[_user];\\n        uint256 length = eventIds.length;\\n\\n        // Temporary storage for filtering events\\n        EventView[] memory tempEventsView = new EventView[](length);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            Event storage eventDetails = events[eventIds[i]];\\n            if (isAccepted && !isEnded && _isAcceptedButNotEnded(eventDetails, _user)) {\\n                tempEventsView[count] = _createEventView(eventDetails);\\n                count++;\\n            } else if (isAccepted && isEnded && _isAcceptedAndEnded(eventDetails, _user)) {\\n                tempEventsView[count] = _createEventView(eventDetails);\\n                count++;\\n            } else if (!isAccepted && !isEnded && _isNotAcceptedAndNotEnded(eventDetails, _user)) {\\n                tempEventsView[count] = _createEventView(eventDetails);\\n                count++;\\n            }\\n        }\\n\\n        // Create a fixed-size array to return only the filtered events\\n        EventView[] memory eventsView = new EventView[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            eventsView[i] = tempEventsView[i];\\n        }\\n\\n        return eventsView;\\n    }\\n\\n    function _isAcceptedButNotEnded(Event storage eventDetails, address _user) internal view returns (bool) {\\n        return eventDetails.participantStatus[_user] == UserStatus.Accepted && !eventDetails.isEnded;\\n    }\\n\\n    function _isAcceptedAndEnded(Event storage eventDetails, address _user) internal view returns (bool) {\\n        return eventDetails.participantStatus[_user] == UserStatus.Accepted && eventDetails.isEnded;\\n    }\\n\\n    function _isNotAcceptedAndNotEnded(Event storage eventDetails, address _user) internal view returns (bool) {\\n        return eventDetails.participantStatus[_user] != UserStatus.Accepted && !eventDetails.isEnded;\\n    }\\n\\n    function _createEventView(Event storage eventDetails) internal view returns (EventView memory) {\\n        return\\n            EventView({\\n                eventId: eventDetails.eventId,\\n                name: eventDetails.name,\\n                regDeadline: eventDetails.regDeadline,\\n                arrivalTime: eventDetails.arrivalTime,\\n                isEnded: eventDetails.isEnded,\\n                participantList: eventDetails.participantList,\\n                onTimeParticipants: eventDetails.onTimeParticipants,\\n                penalties: eventDetails.penalties,\\n                commitmentRequired: eventDetails.commitmentRequired,\\n                totalCommitment: eventDetails.totalCommitment,\\n                location: eventDetails.location\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xdf6bb817cbc4378e1db59faf01701f053485ce893cb927b24459621850e1d9b7\",\"license\":\"MIT\"},\"contracts/IEventContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IEventContract {\\n    struct Event {\\n        uint256 eventId;\\n        string name;\\n        uint256 regDeadline;\\n        uint256 arrivalTime;\\n        bool isEnded;\\n        mapping(address => UserStatus) participantStatus;\\n        address[] participantList;\\n        address[] onTimeParticipants;\\n        uint256 penalties;\\n        uint256 commitmentRequired;\\n        uint256 totalCommitment;\\n        bytes32 location;  // Encoded latitude and longitude\\n        ValidationMode validationMode;\\n        PenaltyMode penaltyMode;\\n    }\\n\\n    struct EventView {\\n    uint256 eventId;\\n    string name;\\n    uint256 regDeadline;\\n    uint256 arrivalTime;\\n    bool isEnded;\\n    address[] participantList;\\n    address[] onTimeParticipants;\\n    uint256 penalties;\\n    uint256 commitmentRequired;\\n    uint256 totalCommitment;\\n    bytes32 location;\\n}\\n\\n\\n    enum UserStatus {\\n        Invited,\\n        Accepted\\n    }\\n    enum PenaltyMode {\\n        Strict,\\n        Moderate,\\n        Lenient\\n    }\\n    enum ValidationMode {\\n        Chainlink,\\n        Vote,\\n        NFC\\n    }\\n\\n   event EventCreated(\\n    uint256 eventId,\\n    string name,\\n    uint256 regDeadline,\\n    uint256 arrivalTime,\\n    bytes32 location\\n);\\n\\n\\n    event UserInvited(uint256 eventId, address invitee);\\n    event UserAccepted(uint256 eventId, address participant);\\n    event UserCheckedArrival(uint256 eventId, address participant, bool onTime);\\n    event Claimed(address indexed claimer, uint256 amount);\\n}\\n\",\"keccak256\":\"0x32d23fbcfbf909f504294f8f27d44fe01afcbf21173ace882fbfe758855aa3d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c55806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806385607ce511610104578063bf8e9176116100a2578063d7c3682211610071578063d7c36822146104dd578063ed66644414610506578063f2fde38b14610519578063fc0c546a1461052c57600080fd5b8063bf8e917614610484578063c4d66de814610497578063c551e01f146104aa578063cb7fcc69146104bd57600080fd5b80639eb6abc6116100de5780639eb6abc6146103fb578063b01b134e1461040e578063b13e704b1461042e578063bf8a8d331461044157600080fd5b806385607ce5146103665780638801c89f146103a45780638da5cb5b146103b757600080fd5b80634e71d92d116101715780636e73d7471161014b5780636e73d747146102de578063715018a61461031c57806371be2e4a14610324578063842d7e9b1461032d57600080fd5b80634e71d92d146102a3578063568d873e146102ab57806359b9a2bc146102be57600080fd5b806320e8db90116101ad57806320e8db901461023c578063248d1b091461024f57806337c29377146102625780634e401eee1461028357600080fd5b8063037f70c7146101d45780630b791430146101fd5780630e66a2fb14610227575b600080fd5b6101e76101e2366004612455565b61053f565b6040516101f49190612505565b60405180910390f35b61021061020b36600461260a565b6108cd565b6040516101f49b9a99989796959493929190612657565b61023a6102353660046126d1565b6109b7565b005b61023a61024a3660046127cb565b610acc565b6101e761025d366004612455565b610c34565b61027561027036600461260a565b610f71565b6040519081526020016101f4565b610275610291366004612455565b60046020526000908152604090205481565b61023a610f92565b6102756102b93660046128b3565b611053565b6102d16102cc366004612455565b611073565b6040516101f491906128d5565b61030c6102ec3660046126d1565b600760209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101f4565b61023a6110df565b61027560005481565b61030c61033b3660046126d1565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61023a6103743660046126d1565b60009182526007602090815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b6102756103b2366004612919565b6110f3565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b0390911681526020016101f4565b61023a610409366004612943565b611124565b61027561041c366004612455565b60066020526000908152604090205481565b61027561043c366004612919565b611168565b61046f61044f36600461260a565b608081901d916fffffffffffffffffffffffffffffffff909116600f0b90565b604080519283526020830191909152016101f4565b61023a61049236600461260a565b611184565b61023a6104a5366004612455565b61129f565b6101e76104b8366004612998565b611404565b6102756104cb366004612455565b60056020526000908152604090205481565b6102756104eb366004612455565b6001600160a01b031660009081526004602052604090205490565b61023a61051436600461260a565b61174b565b61023a610527366004612455565b611a79565b6001546103e3906001600160a01b031681565b6001600160a01b0381166000908152603a6020908152604080832080548251818502810185019093528083526060949383018282801561059e57602002820191906000526020600020905b81548152602001906001019080831161058a575b5050505050905060008151905060008167ffffffffffffffff8111156105c6576105c66126fd565b60405190808252806020026020018201604052801561065957816020015b610646604051806101600160405280600081526020016060815260200160008152602001600081526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681525090565b8152602001906001900390816105e45790505b50905060005b828110156108c45760006002600086848151811061067f5761067f6129e1565b602002602001015181526020019081526020016000209050600060018111156106aa576106aa612623565b6001600160a01b038816600090815260058301602052604090205460ff1660018111156106d9576106d9612623565b036108bb5760405180610160016040528082600001548152602001826001018054610703906129f7565b80601f016020809104026020016040519081016040528092919081815260200182805461072f906129f7565b801561077c5780601f106107515761010080835404028352916020019161077c565b820191906000526020600020905b81548152906001019060200180831161075f57829003601f168201915b5050505050815260200182600201548152602001826003015481526020018260040160009054906101000a900460ff16151581526020018260060180548060200260200160405190810160405280929190818152602001828054801561080b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107ed575b505050505081526020018260070180548060200260200160405190810160405280929190818152602001828054801561086d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161084f575b50505050508152602001826008015481526020018260090154815260200182600a0154815260200182600b01548152508383815181106108af576108af6129e1565b60200260200101819052505b5060010161065f565b50949350505050565b600260205260009081526040902080546001820180549192916108ef906129f7565b80601f016020809104026020016040519081016040528092919081815260200182805461091b906129f7565b80156109685780601f1061093d57610100808354040283529160200191610968565b820191906000526020600020905b81548152906001019060200180831161094b57829003601f168201915b5050505060028301546003840154600485015460088601546009870154600a880154600b890154600c909901549798959794965060ff938416959294919390929181811691610100909104168b565b6109bf611ad0565b6000828152600260205260408120906001600160a01b038316600090815260058301602052604090205460ff1660018111156109fd576109fd612623565b14610a4f5760405162461bcd60e51b815260206004820152601460248201527f5573657220616c726561647920696e766974656400000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b03821660008181526005830160209081526040808320805460ff19169055603a82528083208054600181018255908452928290209092018690558151868152908101929092527f9c6d622696d829eae44c9559a6e96ae07091e9ca797bc02c35a7770dbcf04580910160405180910390a1505050565b610ad4611ad0565b838310610b495760405162461bcd60e51b815260206004820152602660248201527f50656e616c74792073686f756c64206265206c657373207468616e20636f6d6d60448201527f69746d656e7400000000000000000000000000000000000000000000000000006064820152608401610a46565b600080549080610b5883612a47565b9091555050600080548082526002602052604090912090815560018101610b7f8982612aa8565b50600281018790556003810186905560048101805460ff1916905560098101859055600b810183905560008054603b805460018101825592527fbbe3212124853f8b0084a66a2d057c2966e251e132af3691db153ab65f0d1a4d909101819055610be99083611124565b7fa735cf875db2e21e3e452aa2475f11cb984b727f91a58b660f5d094d2de5d83f60005489898987604051610c22959493929190612b68565b60405180910390a15050505050505050565b6001600160a01b0381166000908152603a60209081526040808320805482518185028101850190935280835260609493830182828015610c9357602002820191906000526020600020905b815481526020019060010190808311610c7f575b5050505050905060008151905060008167ffffffffffffffff811115610cbb57610cbb6126fd565b604051908082528060200260200182016040528015610d4e57816020015b610d3b604051806101600160405280600081526020016060815260200160008152602001600081526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681525090565b815260200190600190039081610cd95790505b50905060005b828110156108c457600060026000868481518110610d7457610d746129e1565b60200260200101518152602001908152602001600020905060405180610160016040528082600001548152602001826001018054610db1906129f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddd906129f7565b8015610e2a5780601f10610dff57610100808354040283529160200191610e2a565b820191906000526020600020905b815481529060010190602001808311610e0d57829003601f168201915b5050505050815260200182600201548152602001826003015481526020018260040160009054906101000a900460ff161515815260200182600601805480602002602001604051908101604052809291908181526020018280548015610eb957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e9b575b5050505050815260200182600701805480602002602001604051908101604052809291908181526020018280548015610f1b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610efd575b50505050508152602001826008015481526020018260090154815260200182600a0154815260200182600b0154815250838381518110610f5d57610f5d6129e1565b602090810291909101015250600101610d54565b603b8181548110610f8157600080fd5b600091825260209091200154905081565b33600090815260066020526040902054610fee5760405162461bcd60e51b815260206004820152601360248201527f4e6f20636c61696d61626c6520616d6f756e74000000000000000000000000006044820152606401610a46565b3360008181526006602052604081208054919055600154909161101b916001600160a01b03169083611b44565b60405181815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a250565b608082901b6fffffffffffffffffffffffffffffffff8216175b92915050565b6001600160a01b0381166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156110d357602002820191906000526020600020905b8154815260200190600101908083116110bf575b50505050509050919050565b6110e7611ad0565b6110f16000611bb8565b565b603a602052816000526040600020818154811061110f57600080fd5b90600052602060002001600091509150505481565b61112c611ad0565b60005b81518110156111635761115b8383838151811061114e5761114e6129e1565b60200260200101516109b7565b60010161112f565b505050565b6003602052816000526040600020818154811061110f57600080fd5b60008181526002602052604081209033600090815260058301602052604090205460ff1660018111156111b9576111b9612623565b146112065760405162461bcd60e51b815260206004820152601360248201527f4e6f20696e7669746174696f6e20666f756e64000000000000000000000000006044820152606401610a46565b806002015442111561125a5760405162461bcd60e51b815260206004820152601c60248201527f526567697374726174696f6e20646561646c696e6520706173736564000000006044820152606401610a46565b61126382611c36565b604080518381523360208201527fd1a924a4ebd10ca10383a2b97efa5d6960c61a6b66e2cb2eedcb5d4a66444533910160405180910390a15050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156112ea5750825b905060008267ffffffffffffffff1660011480156113075750303b155b905081158015611315575080155b1561134c576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561138057845468ff00000000000000001916680100000000000000001785555b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790556113b133611d3c565b83156113fc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6001600160a01b038316600090815260036020908152604080832080548251818502810185019093528083526060949383018282801561146357602002820191906000526020600020905b81548152602001906001019080831161144f575b5050505050905060008151905060008167ffffffffffffffff81111561148b5761148b6126fd565b60405190808252806020026020018201604052801561151e57816020015b61150b604051806101600160405280600081526020016060815260200160008152602001600081526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681525090565b8152602001906001900390816114a95790505b5090506000805b8381101561164057600060026000878481518110611545576115456129e1565b602002602001015181526020019081526020016000209050878015611568575088155b80156115795750611579818b611d4d565b156115b75761158781611d95565b848481518110611599576115996129e1565b602002602001018190525082806115af90612a47565b935050611637565b8780156115c15750885b80156115d257506115d2818b611fbd565b156115e05761158781611d95565b871580156115ec575088155b80156115fd57506115fd818b612004565b156116375761160b81611d95565b84848151811061161d5761161d6129e1565b6020026020010181905250828061163390612a47565b9350505b50600101611525565b5060008167ffffffffffffffff81111561165c5761165c6126fd565b6040519080825280602002602001820160405280156116ef57816020015b6116dc604051806101600160405280600081526020016060815260200160008152602001600081526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681525090565b81526020019060019003908161167a5790505b50905060005b8281101561173c5783818151811061170f5761170f6129e1565b6020026020010151828281518110611729576117296129e1565b60209081029190910101526001016116f5565b509450505050505b9392505050565b600081815260026020526040902060038101544210156117ad5760405162461bcd60e51b815260206004820152601560248201527f4576656e7420686173206e6f74207374617274656400000000000000000000006044820152606401610a46565b600481015460ff16156118025760405162461bcd60e51b815260206004820152601360248201527f4576656e7420616c726561647920656e646564000000000000000000000000006044820152606401610a46565b60005b60068201548110156119de57600061185e8484600601848154811061182c5761182c6129e1565b60009182526020808320909101549282526007815260408083206001600160a01b039094168352929052205460ff1690565b905080611904576004600084600601848154811061187e5761187e6129e1565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054916118ae83612a47565b91905055506118e6848460060184815481106118cc576118cc6129e1565b6000918252602090912001546001600160a01b031661204d565b6008830180549060006118f98380612b9e565b909155506119669050565b8260070183600601838154811061191d5761191d6129e1565b600091825260208083209091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b7f6963b91589f2ffce5fcfa81b46731b12498032cad52ab6191a1f81eedf4fe2f58484600601848154811061199d5761199d6129e1565b60009182526020918290200154604080519384526001600160a01b03909116918301919091528315159082015260600160405180910390a150600101611805565b5060005b6007820154811015611a5c5760078201546008830154611a029190612bb1565b60066000846007018481548110611a1b57611a1b6129e1565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909190611a4f908490612b9e565b90915550506001016119e2565b5060048101805460ff19166001179055611a758261208f565b5050565b611a81611ad0565b6001600160a01b038116611ac4576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610a46565b611acd81611bb8565b50565b33611b027f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146110f1576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610a46565b6040516001600160a01b0383811660248301526044820183905261116391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061217c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008181526002602052604090206009810154600154611c65916001600160a01b0390911690339030906121f8565b60098101543360009081526006602052604081208054909190611c89908490612b9e565b90915550503360008181526005830160209081526040808320805460ff19166001908117909155600686018054808301825590855283852001805473ffffffffffffffffffffffffffffffffffffffff19168617905593835260038252822080549384018155825281209091018390556009820154600a8301805491929091611d13908490612b9e565b9091555050336000908152600560205260408120805491611d3383612a47565b91905055505050565b611d44612231565b611acd81612298565b600060016001600160a01b038316600090815260058501602052604090205460ff166001811115611d8057611d80612623565b148015611744575050506004015460ff161590565b611df7604051806101600160405280600081526020016060815260200160008152602001600081526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681525090565b60405180610160016040528083600001548152602001836001018054611e1c906129f7565b80601f0160208091040260200160405190810160405280929190818152602001828054611e48906129f7565b8015611e955780601f10611e6a57610100808354040283529160200191611e95565b820191906000526020600020905b815481529060010190602001808311611e7857829003601f168201915b5050505050815260200183600201548152602001836003015481526020018360040160009054906101000a900460ff161515815260200183600601805480602002602001604051908101604052809291908181526020018280548015611f2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f06575b5050505050815260200183600701805480602002602001604051908101604052809291908181526020018280548015611f8657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f68575b50505050508152602001836008015481526020018360090154815260200183600a0154815260200183600b01548152509050919050565b600060016001600160a01b038316600090815260058501602052604090205460ff166001811115611ff057611ff0612623565b148015611744575050506004015460ff1690565b600060016001600160a01b038316600090815260058501602052604090205460ff16600181111561203757612037612623565b14158015611744575050506004015460ff161590565b6000828152600260209081526040808320600801546001600160a01b038516845260069092528220805491929091612086908490612bd3565b90915550505050565b603b546000906120a190600190612bd3565b67ffffffffffffffff8111156120b9576120b96126fd565b6040519080825280602002602001820160405280156120e2578160200160208202803683370190505b5090506000805b603b548110156121625783603b8281548110612107576121076129e1565b90600052602060002001541461215a57603b818154811061212a5761212a6129e1565b9060005260206000200154838381518110612147576121476129e1565b6020026020010181815250508160010191505b6001016120e9565b50815161217690603b9060208501906123d9565b50505050565b60006121916001600160a01b038416836122a0565b905080516000141580156121b65750808060200190518101906121b49190612be6565b155b15611163576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a46565b6040516001600160a01b0384811660248301528381166044830152606482018390526121769186918216906323b872dd90608401611b71565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166110f1576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a81612231565b60606117448383600084600080856001600160a01b031684866040516122c69190612c03565b60006040518083038185875af1925050503d8060008114612303576040519150601f19603f3d011682016040523d82523d6000602084013e612308565b606091505b5091509150612318868383612322565b9695505050505050565b6060826123375761233282612397565b611744565b815115801561234e57506001600160a01b0384163b155b15612390576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610a46565b5080611744565b8051156123a75780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828054828255906000526020600020908101928215612414579160200282015b828111156124145782518255916020019190600101906123f9565b50612420929150612424565b5090565b5b808211156124205760008155600101612425565b80356001600160a01b038116811461245057600080fd5b919050565b60006020828403121561246757600080fd5b61174482612439565b60005b8381101561248b578181015183820152602001612473565b50506000910152565b600081518084526124ac816020860160208601612470565b601f01601f19169290920160200192915050565b60008151808452602080850194506020840160005b838110156124fa5781516001600160a01b0316875295820195908201906001016124d5565b509495945050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156125fc57603f1989840301855281516101608151855288820151818a87015261255d82870182612494565b915050878201518886015260608083015181870152506080808301516125868288018215159052565b505060a0808301518683038288015261259f83826124c0565b9250505060c080830151868303828801526125ba83826124c0565b60e0858101519089015261010080860151908901526101208086015190890152610140948501519490970193909352505050938601939086019060010161252e565b509098975050505050505050565b60006020828403121561261c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110611acd57634e487b7160e01b600052602160045260246000fd5b60006101608d83528060208401526126718184018e612494565b9150508a604083015289606083015288151560808301528760a08301528660c08301528560e0830152846101008301526126aa84612639565b836101208301526126ba83612639565b826101408301529c9b505050505050505050505050565b600080604083850312156126e457600080fd5b823591506126f460208401612439565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561273c5761273c6126fd565b604052919050565b600082601f83011261275557600080fd5b8135602067ffffffffffffffff821115612771576127716126fd565b8160051b612780828201612713565b928352848101820192828101908785111561279a57600080fd5b83870192505b848310156127c0576127b183612439565b825291830191908301906127a0565b979650505050505050565b600080600080600080600060e0888a0312156127e657600080fd5b873567ffffffffffffffff808211156127fe57600080fd5b818a0191508a601f83011261281257600080fd5b8135602082821115612826576128266126fd565b612838601f8301601f19168201612713565b8281528d8284870101111561284c57600080fd5b828286018383013760009281018201929092529099508a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013591508082111561289757600080fd5b506128a48a828b01612744565b91505092959891949750929550565b600080604083850312156128c657600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561290d578351835292840192918401916001016128f1565b50909695505050505050565b6000806040838503121561292c57600080fd5b61293583612439565b946020939093013593505050565b6000806040838503121561295657600080fd5b82359150602083013567ffffffffffffffff81111561297457600080fd5b61298085828601612744565b9150509250929050565b8015158114611acd57600080fd5b6000806000606084860312156129ad57600080fd5b6129b684612439565b925060208401356129c68161298a565b915060408401356129d68161298a565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612a0b57607f821691505b602082108103612a2b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612a5957612a59612a31565b5060010190565b601f821115611163576000816000526020600020601f850160051c81016020861015612a895750805b601f850160051c820191505b818110156113fc57828155600101612a95565b815167ffffffffffffffff811115612ac257612ac26126fd565b612ad681612ad084546129f7565b84612a60565b602080601f831160018114612b0b5760008415612af35750858301515b600019600386901b1c1916600185901b1785556113fc565b600085815260208120601f198616915b82811015612b3a57888601518255948401946001909101908401612b1b565b5085821015612b585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a060208201526000612b8160a0830187612494565b604083019590955250606081019290925260809091015292915050565b8082018082111561106d5761106d612a31565b600082612bce57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561106d5761106d612a31565b600060208284031215612bf857600080fd5b81516117448161298a565b60008251612c15818460208701612470565b919091019291505056fea2646970667358221220a815a33726677524b0a5a6043e686b9ae16f9e30b2146ccb86e8fab2028d15a164736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4397,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "eventCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4400,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3587"
      },
      {
        "astId": 4405,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "events",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Event)5658_storage)"
      },
      {
        "astId": 4410,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "joinedEvents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4414,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "lateCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4418,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "eventCountByUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4422,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "userClaimableAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4428,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "mockValidation",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4432,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4437,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "invitedEvents",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4440,
        "contract": "contracts/EventContract.sol:EventContract",
        "label": "activeEvents",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3587": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(PenaltyMode)5690": {
        "encoding": "inplace",
        "label": "enum IEventContract.PenaltyMode",
        "numberOfBytes": "1"
      },
      "t_enum(UserStatus)5686": {
        "encoding": "inplace",
        "label": "enum IEventContract.UserStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ValidationMode)5694": {
        "encoding": "inplace",
        "label": "enum IEventContract.ValidationMode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(UserStatus)5686)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IEventContract.UserStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(UserStatus)5686"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Event)5658_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEventContract.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)5658_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Event)5658_storage": {
        "encoding": "inplace",
        "label": "struct IEventContract.Event",
        "members": [
          {
            "astId": 5624,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "eventId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5626,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5628,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "regDeadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5630,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "arrivalTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5632,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "isEnded",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5637,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "participantStatus",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_enum(UserStatus)5686)"
          },
          {
            "astId": 5640,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "participantList",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5643,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "onTimeParticipants",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5645,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "penalties",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5647,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "commitmentRequired",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5649,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "totalCommitment",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 5651,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "location",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes32"
          },
          {
            "astId": 5654,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "validationMode",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(ValidationMode)5694"
          },
          {
            "astId": 5657,
            "contract": "contracts/EventContract.sol:EventContract",
            "label": "penaltyMode",
            "offset": 1,
            "slot": "12",
            "type": "t_enum(PenaltyMode)5690"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}